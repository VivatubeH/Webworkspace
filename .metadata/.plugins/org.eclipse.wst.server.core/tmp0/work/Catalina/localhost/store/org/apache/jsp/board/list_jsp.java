/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.26
 * Generated at: 2024-09-18 16:22:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import vo.Board;
import java.util.List;
import util.Pagination;
import dao.BoardDao;
import util.Utils;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/common/nav.jsp", Long.valueOf(1724373072163L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("vo.Board");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("dao.BoardDao");
    _jspx_imports_classes.add("util.Utils");
    _jspx_imports_classes.add("util.Pagination");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!doctype html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"utf-8\">\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("	<title>애플리케이션</title>\r\n");
      out.write("	<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" crossorigin=\"anonymous\">\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	String menu = "게시판";

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

	String loginedUserId = (String) session.getAttribute("USERID");
	String loginedUserName = (String) session.getAttribute("USERNAME");

      out.write("\r\n");
      out.write("<nav class=\"navbar navbar-expand-sm bg-dark navbar-dark\">\r\n");
      out.write("	<div class=\"container-fluid\">\r\n");
      out.write("		<ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n");
      out.write("			<li class=\"nav-item\">\r\n");
      out.write("				<a class=\"nav-link ");
      out.print("홈".equals(menu) ? "active" : "" );
      out.write("\" href=\"/store/index.jsp\">홈</a>\r\n");
      out.write("			</li>\r\n");
      out.write("			<li class=\"nav-item\">\r\n");
      out.write("				<a class=\"nav-link ");
      out.print("상품".equals(menu) ? "active" : "" );
      out.write("\" href=\"/store/product/list.jsp\">상품</a>\r\n");
      out.write("			</li>\r\n");
      out.write("			<li class=\"nav-item\">\r\n");
      out.write("				<a class=\"nav-link ");
      out.print("게시판".equals(menu) ? "active" : "" );
      out.write("\" href=\"/store/board/list.jsp\">게시판</a>\r\n");
      out.write("			</li>\r\n");
      out.write("			<li class=\"nav-item\">\r\n");
      out.write("				<a class=\"nav-link ");
      out.print("상품관리".equals(menu) ? "active" : "" );
      out.write("\" href=\"/store/admin/product/home.jsp\">상품관리</a>\r\n");
      out.write("			</li>\r\n");
      out.write("		</ul>\r\n");

	if (loginedUserName != null) {

      out.write("\r\n");
      out.write("		<span class=\"navbar-text\">\r\n");
      out.write("			<strong class=\"fw-bold text-white\">");
      out.print(loginedUserName );
      out.write("</strong>님 환영합니다.\r\n");
      out.write("		</span>\r\n");
		
	}

      out.write("\r\n");
      out.write("		<ul class=\"navbar-nav\">\r\n");

	if (loginedUserId == null) {

      out.write("\r\n");
      out.write("			<li class=\"nav-item\">\r\n");
      out.write("				<a class=\"nav-link ");
      out.print("로그인".equals(menu) ? "active" : "" );
      out.write("\" href=\"/store/user/login-form.jsp\">로그인</a>\r\n");
      out.write("			</li>\r\n");
      out.write("			<li class=\"nav-item\">\r\n");
      out.write("				<a class=\"nav-link ");
      out.print("회원가입".equals(menu) ? "active" : "" );
      out.write("\" href=\"/store/user/form.jsp\">회원가입</a>\r\n");
      out.write("			</li>\r\n");

	} else {

      out.write("\r\n");
      out.write("			<li class=\"nav-item\">\r\n");
      out.write("				<a class=\"nav-link ");
      out.print("문의".equals(menu) ? "active" : "" );
      out.write("\" href=\"/store/qna/list.jsp\">내 문의내역</a>\r\n");
      out.write("			</li>\r\n");
      out.write("			<li class=\"nav-item\">\r\n");
      out.write("				<a class=\"nav-link ");
      out.print("장바구니".equals(menu) ? "active" : "" );
      out.write("\" href=\"/store/cart/list.jsp\">장바구니</a>\r\n");
      out.write("			</li>\r\n");
      out.write("			<li class=\"nav-item\">\r\n");
      out.write("				<a class=\"nav-link\" href=\"/store/user/logout.jsp\">로그아웃</a>\r\n");
      out.write("			</li>\r\n");
		
	}

      out.write("\r\n");
      out.write("		</ul>\r\n");
      out.write("	</div>\r\n");
      out.write("</nav>");
      out.write("\r\n");
      out.write("<div class=\"container mt-4 mb-5\">\r\n");
      out.write("	<h1>게시글 목록</h1>\r\n");
      out.write("	<p>게시글 목록을 확인하세요</p>\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	// 요청파라미터 값을 조회한다.
	// 요청한 페이지번호를 조회한다. 페이지번호가 없으면 1을 반환한다.
	int pageNo = Utils.toInt(request.getParameter("page"), 1);

	BoardDao boardDao = new BoardDao();
	// 총 게시글 갯수를 조회한다.
	int totalRows = boardDao.getTotalRows();
	
	// 페이징처리에 필요한 정보를 제공하는 Pagination객체를 생성한다.
	Pagination pagination = new Pagination(pageNo, totalRows);
	
	// 요청한 페이지번호에 맞는 조회범위의 게시글 목록을 조회한다.
	List<Board> boards
		= boardDao.getBoards(pagination.getBegin(), pagination.getEnd());

      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<table class=\"table\">\r\n");
      out.write("		<colgroup>\r\n");
      out.write("			<col width=\"10%\">\r\n");
      out.write("			<col width=\"*\">\r\n");
      out.write("			<col width=\"15%\">\r\n");
      out.write("			<col width=\"10%\">\r\n");
      out.write("			<col width=\"10%\">\r\n");
      out.write("			<col width=\"15%\">\r\n");
      out.write("		</colgroup>\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>번호</th>\r\n");
      out.write("				<th>제목</th>\r\n");
      out.write("				<th>작성자</th>\r\n");
      out.write("				<th>조회수</th>\r\n");
      out.write("				<th>추천수</th>\r\n");
      out.write("				<th>등록일</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody>\r\n");

	int rowNumber = pagination.getBegin();
	for (Board board : boards) {

      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>");
      out.print(rowNumber++ );
      out.write("</td>\r\n");
      out.write("				<td><a href=\"hit.jsp?no=");
      out.print(board.getNo() );
      out.write("&page=");
      out.print(pageNo );
      out.write('"');
      out.write('>');
      out.print(board.getTitle() );
      out.write("</a></td>\r\n");
      out.write("				<td>");
      out.print(board.getUser().getName() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(Utils.toCurrency(board.getViewCnt()) );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(Utils.toCurrency(board.getLikeCnt()) );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(board.getCreatedDate() );
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");

	}

      out.write("\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");

	if (pagination.getTotalRows() > 0) {
		int beginPage = pagination.getBeginPage();
		int endPage = pagination.getEndPage();

      out.write("\r\n");
      out.write("	<div>\r\n");
      out.write("		<ul class=\"pagination justify-content-center\">\r\n");
      out.write("			<li class=\"page-item ");
      out.print(pagination.isFirst() ? "disabled" : "" );
      out.write("\">\r\n");
      out.write("				<a href=\"list.jsp?page=");
      out.print(pagination.getPrev() );
      out.write("\" class=\"page-link\">이전</a>\r\n");
      out.write("			</li>\r\n");

		for (int num = beginPage; num <= endPage; num++) {

      out.write("\r\n");
      out.write("			<li class=\"page-item\">\r\n");
      out.write("				<a href=\"list.jsp?page=");
      out.print(num );
      out.write("\" \r\n");
      out.write("					class=\"page-link ");
      out.print(pageNo == num ? "active": "" );
      out.write("\">\r\n");
      out.write("					");
      out.print(num );
      out.write("\r\n");
      out.write("				</a>\r\n");
      out.write("			</li>\r\n");

		}

      out.write("\r\n");
      out.write("			<li class=\"page-item ");
      out.print(pagination.isLast() ? "disabled" : "" );
      out.write("\">\r\n");
      out.write("				<a href=\"list.jsp?page=");
      out.print(pagination.getNext() );
      out.write("\" class=\"page-link\">다음</a>\r\n");
      out.write("			</li>\r\n");
      out.write("		</ul>\r\n");
      out.write("	</div>\r\n");

	}

      out.write("\r\n");
      out.write("\r\n");

	// loginedUserId 변수는 nav.jsp에 선언된 변수다.
	if (loginedUserId != null) {

      out.write("\r\n");
      out.write("	<div class=\"text-end\">\r\n");
      out.write("		<a href=\"form.jsp\" class=\"btn btn-primary\">새 글</a>\r\n");
      out.write("	</div>\r\n");

	}

      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
