/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.26
 * Generated at: 2024-09-27 05:15:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.user;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import utils.Util;
import utils.EmailAuth;
import domain.user.vo.User;
import domain.admin.dao.AdminDao;

public final class join_002dform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/common/header.jsp", Long.valueOf(1727405496026L));
    _jspx_dependants.put("/common/footer.jsp", Long.valueOf(1727395435161L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("utils.Util");
    _jspx_imports_classes.add("utils.EmailAuth");
    _jspx_imports_classes.add("domain.user.vo.User");
    _jspx_imports_classes.add("domain.admin.dao.AdminDao");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" crossorigin=\"anonymous\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/css/guide.css\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>회원가입 폼</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<header id=\"divHeader\">\r\n");
      out.write("    <div class=\"headerTop\">\r\n");
      out.write("        <div class=\"center flexBetween\">\r\n");
      out.write("            <a href=\"/index.jsp\" class=\"logo\">\r\n");
      out.write("            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" fill=\"currentColor\" class=\"bi bi-book\" viewBox=\"0 0 16 16\">\r\n");
      out.write("                    <path d=\"M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783\"/>\r\n");
      out.write("                </svg>   \r\n");
      out.write("                <span class=\"bold\">BOOKOREA</span>\r\n");
      out.write("            </a>\r\n");
      out.write("            <ul id=\"divGlobalMenu\" class=\"flex\">\r\n");
      out.write("                ");

                    int USERNO = (Integer) session.getAttribute("USERNO");
                    String USERID = (String) session.getAttribute("USERID");
                    String USERNICKNAME = (String) session.getAttribute("USERNICKNAME");
                    String USERTYPE = (String) session.getAttribute("USERTYPE");
                    
                    if (USERID != null && !USERID.isEmpty() && USERTYPE.equals("USER")) {
                
      out.write("\r\n");
      out.write("                <li>\r\n");
      out.write("                	<strong>");
      out.print(USERNICKNAME);
      out.write("</strong>님 환영합니다.\r\n");
      out.write("                	<a href=\"/user/logout.jsp\" class=\"btn btn-sm\">로그아웃</a>\r\n");
      out.write("               	</li>\r\n");
      out.write("                ");

                } else if (USERID != null && !USERID.isEmpty() && USERTYPE.equals("ADMIN")) {
                
      out.write("\r\n");
      out.write("                <li>\r\n");
      out.write("	                <strong>");
      out.print(USERNICKNAME);
      out.write("</strong>님 환영합니다.\r\n");
      out.write("                	<a href=\"/user/logout.jsp\" class=\"btn btn-sm\">로그아웃</a>\r\n");
      out.write("               	</li>\r\n");
      out.write("                <li><a href=\"../admin/index.jsp\" class=\"\"><mark>관리자 홈페이지로 이동</mark></a></li>\r\n");
      out.write("                ");

                } else {
                
      out.write("\r\n");
      out.write("                <li><a href=\"/user/login-form.jsp\">로그인</a></li>\r\n");
      out.write("                <li><a href=\"/user/join-form.jsp\">회원가입</a></li>\r\n");
      out.write("                ");

                    }
                
      out.write("\r\n");
      out.write("            </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"headerBot\">\r\n");
      out.write("        <div class=\"center\">\r\n");
      out.write("            <div class=\"searchW\">\r\n");
      out.write("                <p class=\"bold\">찾고 있는 중고 도서를 검색해보세요</p>\r\n");
      out.write("                <div class=\"searchForm\">\r\n");
      out.write("                    <form action=\"/book/list.jsp\" method=\"get\" class=\"inputBox\">\r\n");
      out.write("                        <fieldset class=\"searchBox flex\">\r\n");
      out.write("                            <legend>도서 검색</legend>\r\n");
      out.write("                            <label for=\"searchBook\" class=\"searchBook\">\r\n");
      out.write("                                <input type=\"text\" id=\"searchBook\" name=\"keyword\" class=\"searchInput\" placeholder=\"도서명을 입력해주세요.\" autocomplete=\"off\" onkeyup=\"checkInput();\">\r\n");
      out.write("                            </label>\r\n");
      out.write("                            <input type=\"image\" src=\"/images/search.svg\" class=\"searchBtn\" alt=\"도서 검색\">\r\n");
      out.write("                        </fieldset>\r\n");
      out.write("                    </form>\r\n");
      out.write("            		<div class=\"searchList hide\">\r\n");
      out.write("	       				<ul class=\"searchUl p-0\"></ul>\r\n");
      out.write("	       			</div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div id=\"divTopMenu\">\r\n");
      out.write("        <div class=\"center\">\r\n");
      out.write("            <ul class=\"flexCenter\">\r\n");
      out.write("                <li><a href=\"/book/list.jsp\">전체 도서</a></li>\r\n");
      out.write("                <li><a href=\"/sell/list.jsp\">책 판매합니다</a></li>\r\n");
      out.write("                <li><a href=\"/purchase/list.jsp\">책 구매합니다</a></li>\r\n");
      out.write("                <li><a href=\"/qna/list.jsp\">문의 게시판</a></li>\r\n");
      out.write("                ");

                    if (USERID != null && !USERID.isEmpty()) {
                
      out.write("\r\n");
      out.write("                <li><a href=\"/user/myPage.jsp\">마이 페이지</a></li>\r\n");
      out.write("                ");

                    }
                
      out.write("\r\n");
      out.write("            </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</header>\r\n");
      out.write("<script>\r\n");
      out.write("	const searchInput = document.querySelector(\"#searchBook\");\r\n");
      out.write("	const searchBox = document.querySelector(\".searchList\");\r\n");
      out.write("	const searchUl = document.querySelector(\".searchUl\");\r\n");
      out.write("	\r\n");
      out.write("	/* input type text(#searchBook)의 onkeyup 이벤트 */\r\n");
      out.write("	const checkInput = () => {\r\n");
      out.write("	    const beforeInput = searchInput.value;\r\n");
      out.write("	    timer(beforeInput);\r\n");
      out.write("	}\r\n");
      out.write("	const timer = (beforeInput) => {\r\n");
      out.write("	    // 검색창 비었으면 키워드 창 hide처리\r\n");
      out.write("	    if(searchInput.value === \"\") {\r\n");
      out.write("			searchBox.classList.add(\"hide\");	\r\n");
      out.write("	    } else {\r\n");
      out.write("			searchBox.classList.remove(\"hide\");\r\n");
      out.write("	    }\r\n");
      out.write("\r\n");
      out.write("	    setTimeout(() => {\r\n");
      out.write("	    	if(searchInput.value === beforeInput) {\r\n");
      out.write("				loadData(searchInput.value);\r\n");
      out.write("	    } \r\n");
      out.write("	  }, 200);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/* 데이터 가져옴 */\r\n");
      out.write("	const loadData = (input) => {\r\n");
      out.write("	  const url = `/book/search.jsp?keyword=${input}`;\r\n");
      out.write("	  // 매개변수 input 값에 따라 서버에서 해당 검색어가 포함된 책 데이터를 가져옴\r\n");
      out.write("	  fetch(url)\r\n");
      out.write("		.then((res) => res.json())\r\n");
      out.write("		.then(books => fillSearch(books))\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/* 데이터 보여줌 */\r\n");
      out.write("	const fillSearch = (books) => {\r\n");
      out.write("		searchUl.innerHTML = \"\";\r\n");
      out.write("		for (let book of books) {\r\n");
      out.write("			let li = `\r\n");
      out.write("				<li>\r\n");
      out.write("					<a href=\"/book/detail.jsp?bookNo=${book.no}\">${book.title}</a>\r\n");
      out.write("				</li>\r\n");
      out.write("			`;\r\n");
      out.write("			searchUl.innerHTML += li;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("</script>");
      out.write("\r\n");
      out.write("    <div class=\"d-flex justify-content-center join\">                                                             \r\n");
      out.write("        <form class=\"border bg-light card p-2 text-dark p-3 w-25\" method=\"post\" action=\"join.jsp\" onsubmit=\"return checkForm()\">\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"joinId\" class=\"form-label\">아이디</label>\r\n");
      out.write("                <input id=\"joinId\" class=\"form-control\" type=\"text\" name=\"id\" placeholder=\"최소 6자를 입력하세요.\" onkeyup=\"checkId()\"/>\r\n");
      out.write("                <p id=\"idMsg\"></p>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"joinPassword\" class=\"form-label\">비밀번호</label>\r\n");
      out.write("                <input id=\"joinPassword\" class=\"form-control\" type=\"password\" name=\"password\" placeholder=\"영어와 숫자를 조합하여 최소 6자를 입력하세요.\" onkeyup=\"checkPassword()\"/>\r\n");
      out.write("                <p id=\"passwordMsg\"></p>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"joinNickname\" class=\"form-label\">닉네임</label>\r\n");
      out.write("                <input id=\"joinNickname\" class=\"form-control\" type=\"text\" name=\"nickname\" placeholder=\"최소 2글자를 입력하세요.\" onkeyup=\"checkNickname()\"/>\r\n");
      out.write("                <p id=\"nicknameMsg\"></p>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <div class=\"input-group mb-2\">\r\n");
      out.write("                    <input type=\"text\" id=\"postcode\" name=\"addr1\" class=\"form-control\" placeholder=\"우편번호\" readonly>\r\n");
      out.write("                    <div class=\"input-group-append\">\r\n");
      out.write("                        <button type=\"button\" class=\"btn btn-secondary\" onclick=\"daumPostcode();\">우편번호 찾기</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <input type=\"text\" id=\"roadAddress\" name=\"addr2\" class=\"form-control mb-2\" placeholder=\"도로명주소\" readonly>\r\n");
      out.write("                <input type=\"hidden\" id=\"jibunAddress\" placeholder=\"지번주소\">\r\n");
      out.write("                <span id=\"guide\" style=\"color:#999;display:none\"></span>\r\n");
      out.write("                <input type=\"text\" id=\"detailAddress\" name=\"addr3\" class=\"form-control mb-2\" placeholder=\"상세주소\">\r\n");
      out.write("                <input type=\"hidden\" id=\"extraAddress\" placeholder=\"참고항목\">\r\n");
      out.write("                <input type=\"hidden\" id=\"engAddress\" placeholder=\"영문주소\">\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"joinPhone\" class=\"form-label\">핸드폰 번호</label>\r\n");
      out.write("                <input id=\"joinPhone\" class=\"form-control\" type=\"text\" name=\"phone\" onkeyup=\"checkPhone()\"/>\r\n");
      out.write("                <p id=\"phoneMsg\"></p>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"joinEmail\" class=\"form-label\">이메일</label>\r\n");
      out.write("                <input id=\"joinEmail\" class=\"form-control\" type=\"text\" name=\"email\" onkeyup=\"checkEmail()\"/>\r\n");
      out.write("                <p id=\"emailMsg\"></p>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"text-end mb-3\">\r\n");
      out.write("                <button type=\"button\" id=\"sendButton\" class=\"btn btn-outline-primary btn-sm\" onclick=\"sendAuthToken()\">인증 번호 전송</button>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-3 mb-3\">\r\n");
      out.write("                <label for=\"joinAuthToken\" class=\"form-label\">이메일 인증 번호</label>\r\n");
      out.write("                <input id=\"joinAuthToken\" class=\"form-control\" type=\"text\" name=\"emailAuthToken\" disabled/>\r\n");
      out.write("                <p id=\"emailAuthMsg\"></p>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"text-end mb-3\">\r\n");
      out.write("                <button type=\"button\" id=\"checkButton\" class=\"btn btn-outline-primary btn-sm\" onclick=\"checkAuthToken()\" disabled>인증 번호 확인</button>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"text-end mb-3\">\r\n");
      out.write("                <button type=\"submit\" id=\"joinButton\" class=\"btn btn-primary\" disabled>회원가입</button>\r\n");
      out.write("            </div>\r\n");
      out.write("            <p id=\"msg\"></p>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("    <script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("		// 정규식\r\n");
      out.write("		// 아이디는 영문자로 시작하는 6~20자 영문자 또는 숫자\r\n");
      out.write("	    const REG_ID = /^[a-z]+[a-z0-9]{5,19}$/;\r\n");
      out.write("		// 비밀번호는 최소 6글자와 최소 하나의 영문자나 숫자를 포함해야 한다.\r\n");
      out.write("	    const REG_PASSWORD = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,20}$/;\r\n");
      out.write("	    const REG_EMAIL = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n");
      out.write("	    const REG_PHONE = /^(01[016789]{1})-?[0-9]{3,4}-?[0-9]{4}$/;\r\n");
      out.write("	    \r\n");
      out.write(" 		// 유효성 검사\r\n");
      out.write("		function checkForm() {\r\n");
      out.write("			let msg = document.getElementById(\"msg\");\r\n");
      out.write("			let idValue = document.querySelector(\"[name=id]\").value;\r\n");
      out.write("		    let passwordValue = document.querySelector(\"[name=password]\").value;\r\n");
      out.write("		    let nicknameValue = document.querySelector(\"[name=nickname]\").value;\r\n");
      out.write("		    let addr1Value = document.querySelector(\"[name=addr1]\").value;\r\n");
      out.write("		    let addr2Value = document.querySelector(\"[name=addr2]\").value;\r\n");
      out.write("		    let addr3Value = document.querySelector(\"[name=addr3]\").value;\r\n");
      out.write("		    let phoneValue = document.querySelector(\"[name=phone]\").value;\r\n");
      out.write("		    let emailValue = document.querySelector(\"[name=email]\").value;\r\n");
      out.write("		    let emailAuthTokenValue = document.querySelector(\"[name=emailAuthToken]\").value;\r\n");
      out.write(" 			\r\n");
      out.write("		    if (idValue.trim() === \"\"\r\n");
      out.write("		        || passwordValue.trim() === \"\"\r\n");
      out.write("		        || nicknameValue.trim() === \"\"\r\n");
      out.write("		        || addr1Value.trim() === \"\"\r\n");
      out.write("		        || addr2Value.trim() === \"\"\r\n");
      out.write("		        || addr3Value.trim() === \"\"\r\n");
      out.write("		        || phoneValue.trim() === \"\"\r\n");
      out.write("		        || emailValue.trim() === \"\"\r\n");
      out.write("		        || emailAuthTokenValue.trim() === \"\") {\r\n");
      out.write("		        msg.textContent = \"작성하지 않은 칸이 존재합니다.\";\r\n");
      out.write("		        return false;\r\n");
      out.write("		    }\r\n");
      out.write("		    msg.textContent = \"\";\r\n");
      out.write("		    \r\n");
      out.write("		    if (!checkSameId()) {\r\n");
      out.write("				alert('중복된 아이디입니다.');\r\n");
      out.write("				return false;\r\n");
      out.write("		    }\r\n");
      out.write("		    \r\n");
      out.write("		    if (nicknameValue.length === 1) {\r\n");
      out.write("				alert('닉네임은 최소 2글자입니다.');\r\n");
      out.write("				return false;\r\n");
      out.write("		    }\r\n");
      out.write("		    \r\n");
      out.write("		    if (!checkSameNickname()) {\r\n");
      out.write("				alert('중복된 닉네임입니다.');\r\n");
      out.write("				return false;\r\n");
      out.write("		    }\r\n");
      out.write("		    \r\n");
      out.write("		    console.log(idValue);\r\n");
      out.write("		    if (!REG_ID.test(idValue)) {\r\n");
      out.write("				console.log(idValue);\r\n");
      out.write("		    	alert('아이디는 영문자로 시작하는 6~20자 영문자 또는 숫자이어야 합니다.');\r\n");
      out.write("		    	return false;\r\n");
      out.write("		    }\r\n");
      out.write("		    \r\n");
      out.write("		    if (!REG_PASSWORD.test(passwordValue)) {\r\n");
      out.write("		        alert('비밀번호 입력 칸을 다시 확인해주세요.');\r\n");
      out.write("		        return false;\r\n");
      out.write("		    }\r\n");
      out.write("		    \r\n");
      out.write("		    if(!REG_PHONE.test(phoneValue)) {\r\n");
      out.write("		        alert('핸드폰 번호 입력 칸을 다시 확인해주세요.');\r\n");
      out.write("		        return false;\r\n");
      out.write("		    }\r\n");
      out.write("		    \r\n");
      out.write("		    if(!REG_EMAIL.test(emailValue)) {\r\n");
      out.write("		        alert('이메일 입력 칸을 다시 확인해주세요.');\r\n");
      out.write("		        return false;\r\n");
      out.write("		    }\r\n");
      out.write("		\r\n");
      out.write("		    return true;\r\n");
      out.write("		}\r\n");
      out.write("        \r\n");
      out.write(" 		// 키보드 입력마다 아이디 유효성 검사\r\n");
      out.write("        function checkId() {\r\n");
      out.write("        	let idValue = document.querySelector(\"[name=id]\").value;\r\n");
      out.write("            let idMsg = document.getElementById(\"idMsg\");\r\n");
      out.write("\r\n");
      out.write("            if (idValue.length < 6) {\r\n");
      out.write("                idMsg.textContent = \"6글자 이상 입력하세요.\";\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            if (idValue.length > 20) {\r\n");
      out.write("                idMsg.textContent = \"아이디가 너무 깁니다.\";\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // ajax\r\n");
      out.write("            let xhr = new XMLHttpRequest();\r\n");
      out.write("            xhr.onreadystatechange = function () {\r\n");
      out.write("                if (xhr.readyState === 4 && xhr.status === 200) {\r\n");
      out.write("                    let data = xhr.responseText.trim();\r\n");
      out.write("                    if (data === 'none') {\r\n");
      out.write("                        idMsg.textContent = \"\";\r\n");
      out.write("                    } else if (data === 'exist') {\r\n");
      out.write("                        idMsg.textContent = \"중복된 아이디 입니다.\";\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            xhr.open(\"GET\", \"idCheck.jsp?id=\" + idValue.trim());\r\n");
      out.write("            xhr.send();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write(" 		// 키보드 입력마다 닉네임 유효성 검사\r\n");
      out.write("        function checkNickname() {\r\n");
      out.write("        	let nicknameValue = document.querySelector(\"[name=nickname]\").value;\r\n");
      out.write("            let nicknameMsg = document.getElementById(\"nicknameMsg\");\r\n");
      out.write("\r\n");
      out.write("            if (nicknameValue.length < 2) {\r\n");
      out.write("            	nicknameMsg.textContent = \"2글자 이상 입력하세요.\";\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            nicknameMsg.textContent = \"\";\r\n");
      out.write("\r\n");
      out.write("            // ajax\r\n");
      out.write("            let xhr = new XMLHttpRequest();\r\n");
      out.write("            xhr.onreadystatechange = function () {\r\n");
      out.write("                if (xhr.readyState === 4 && xhr.status === 200) {\r\n");
      out.write("                    let data = xhr.responseText.trim();\r\n");
      out.write("                    if (data === 'none') {\r\n");
      out.write("                    	nicknameMsg.textContent = \"\";\r\n");
      out.write("                    } else if (data === 'exist') {\r\n");
      out.write("                    	nicknameMsg.textContent = \"중복된 아이디 입니다.\";\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            xhr.open(\"GET\", \"nicknameCheck.jsp?nickname=\" + nicknameValue.trim());\r\n");
      out.write("            xhr.send();\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write(" 		// 회원가입 버튼 누를 시 아이디 유효성\r\n");
      out.write(" 		function checkSameId() {\r\n");
      out.write("			let result = false;\r\n");
      out.write(" 			let idValue = document.querySelector(\"[name=id]\").value;\r\n");
      out.write(" 			// ajax\r\n");
      out.write("            let xhr = new XMLHttpRequest();\r\n");
      out.write("            xhr.onreadystatechange = function () {\r\n");
      out.write("                if (xhr.readyState === 4 && xhr.status === 200) {\r\n");
      out.write("                    let data = xhr.responseText.trim();\r\n");
      out.write("                    if (data === 'none') {\r\n");
      out.write("                    	result = true;\r\n");
      out.write("                    } else if (data === 'exist') {\r\n");
      out.write("                    	result = false;\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("            \r\n");
      out.write("            xhr.open(\"GET\", \"idCheck.jsp?id=\" + idValue.trim(), false);\r\n");
      out.write("            xhr.send();\r\n");
      out.write("            return result;\r\n");
      out.write(" 		}\r\n");
      out.write(" 		\r\n");
      out.write(" 		// 회원가입 버튼 누를 시 닉네임 유효성\r\n");
      out.write(" 		function checkSameNickname() {\r\n");
      out.write("			let result = false;\r\n");
      out.write(" 			let nicknameValue = document.querySelector(\"[name=nickname]\").value;\r\n");
      out.write(" 			// ajax\r\n");
      out.write("            let xhr = new XMLHttpRequest();\r\n");
      out.write("            xhr.onreadystatechange = function () {\r\n");
      out.write("                if (xhr.readyState === 4 && xhr.status === 200) {\r\n");
      out.write("                    let data = xhr.responseText.trim();\r\n");
      out.write("                    if (data === 'none') {\r\n");
      out.write("                    	result = true;\r\n");
      out.write("                    } else if (data === 'exist') {\r\n");
      out.write("                    	result = false;\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("            \r\n");
      out.write("            xhr.open(\"GET\", \"nicknameCheck.jsp?nickname=\" + nicknameValue.trim(), false);\r\n");
      out.write("            xhr.send();\r\n");
      out.write("            return result;\r\n");
      out.write(" 		}\r\n");
      out.write(" 		\r\n");
      out.write(" 		// 비밀번호 유효성 검사\r\n");
      out.write("        function checkPassword() {\r\n");
      out.write("        	let passwordValue = document.querySelector(\"[name=password]\").value;\r\n");
      out.write("            let passwordMsg = document.getElementById(\"passwordMsg\");\r\n");
      out.write("\r\n");
      out.write("            if (passwordValue.length < 6) {\r\n");
      out.write("                passwordMsg.textContent = \"6글자 이상 입력하세요.\";\r\n");
      out.write("                return ;\r\n");
      out.write("            }\r\n");
      out.write("            if (!REG_PASSWORD.test(passwordValue)) {\r\n");
      out.write("                passwordMsg.textContent = \"영어와 숫자를 조합하세요.\";\r\n");
      out.write("                return ;\r\n");
      out.write("            }\r\n");
      out.write("            if (passwordValue.length > 20) {\r\n");
      out.write("                passwordMsg.textContent = \"비밀번호가 너무 깁니다.\";\r\n");
      out.write("                return ;\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // 아무것도 해당 안되면 빈칸\r\n");
      out.write("            passwordMsg.textContent = \"\";\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function checkPhone() {\r\n");
      out.write("        	let phoneValue = document.querySelector(\"[name=phone]\").value;\r\n");
      out.write("            let phoneMsg = document.getElementById(\"phoneMsg\");\r\n");
      out.write("\r\n");
      out.write("            if (!REG_PHONE.test(phoneValue)) {\r\n");
      out.write("                phoneMsg.textContent = \"알맞은 핸드폰 번호 양식이 아닙니다.\";\r\n");
      out.write("                return ;\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("         // 아무것도 해당 안되면 빈칸\r\n");
      out.write("            phoneMsg.textContent = \"\";\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function checkEmail() {\r\n");
      out.write("        	let emailValue = document.querySelector(\"[name=email]\").value;\r\n");
      out.write("			let emailMsg = document.getElementById(\"emailMsg\");\r\n");
      out.write("			\r\n");
      out.write("			if (!REG_EMAIL.test(emailValue)) {\r\n");
      out.write("				emailMsg.textContent = \"알맞은 이메일 주소 양식이 아닙니다.\";\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 아무것도 해당 안되면 빈칸\r\n");
      out.write("			emailMsg.textContent = \"\";\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function sendAuthToken() {\r\n");
      out.write("        	let emailValue = document.querySelector(\"[name=email]\").value;\r\n");
      out.write("        	if (!REG_EMAIL.test(emailValue)) {\r\n");
      out.write("				alert('올바른 이메일을 작성해주세요');\r\n");
      out.write("				return ;\r\n");
      out.write("			} else {\r\n");
      out.write("				// ajax\r\n");
      out.write("	            let xhr = new XMLHttpRequest();\r\n");
      out.write("	            xhr.onreadystatechange = function () {\r\n");
      out.write("	                if (xhr.readyState === 4 && xhr.status === 200) {\r\n");
      out.write("	    	        	document.getElementById(\"joinAuthToken\").disabled = false;\r\n");
      out.write("	    	        	document.getElementById(\"checkButton\").disabled = false;\r\n");
      out.write("	    	        	document.getElementById(\"joinEmail\").readOnly = true;\r\n");
      out.write("	    	        	document.getElementById(\"sendButton\").disabled = true;\r\n");
      out.write("	                }\r\n");
      out.write("	            };\r\n");
      out.write("\r\n");
      out.write("				xhr.open(\"GET\", \"join-form.jsp?requestEmail=\" + emailValue);\r\n");
      out.write("				xhr.send();\r\n");

				// 처음 인증번호를 요청한 이메일
				String requestEmail = request.getParameter("requestEmail");
				if (requestEmail != null) {
					EmailAuth.sendEmail(requestEmail);
				}

      out.write("\r\n");
      out.write("			}\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function checkAuthToken() {\r\n");
      out.write("        	let emailAuthTokenValue = document.querySelector(\"[name=emailAuthToken]\").value;\r\n");
      out.write("        	if (emailAuthTokenValue.length !== 6) {\r\n");
      out.write("				alert(\"입력한 인증번호가 6글자가 아닙니다.\");\r\n");
      out.write("				return ;\r\n");
      out.write("        	} else {\r\n");
      out.write("        		// ajax\r\n");
      out.write("	            let xhr = new XMLHttpRequest();\r\n");
      out.write("        		// onload는 onreadystatechange의 하나의 트랜잭션\r\n");
      out.write("        		// onreadystatechange사용 시 readyState가 4가 될 때 까지 계속 alert(\"인증이 실패하였습니다. 다시 시도해주세요.\"); 실행됨\r\n");
      out.write("	            xhr.onload = function () {\r\n");
      out.write("	                if (xhr.status === 200) {\r\n");
      out.write("	                	let msg = xhr.responseText.trim();\r\n");
      out.write("	                	if (msg === \"인증이 완료되었습니다.\") {\r\n");
      out.write("	    	        		document.getElementById(\"joinAuthToken\").disabled = true;\r\n");
      out.write("		    	        	document.getElementById(\"checkButton\").disabled = true;\r\n");
      out.write("		    	        	document.getElementById(\"joinButton\").disabled = false;\r\n");
      out.write("		    	        	alert(msg);\r\n");
      out.write("	                	} else {\r\n");
      out.write("	                		alert(msg);\r\n");
      out.write("	                	}\r\n");
      out.write("	                } else {\r\n");
      out.write("	                	alert(\"인증이 실패하였습니다. 다시 시도해주세요.\");\r\n");
      out.write("	                }\r\n");
      out.write("	            };\r\n");
      out.write("			xhr.open(\"GET\", \"emailAuth.jsp?inputToken=\" + emailAuthTokenValue + \"&responseEmail=\" + document.querySelector(\"[name=email]\").value);\r\n");
      out.write("			xhr.send();\r\n");
      out.write("        	}\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function daumPostcode() {\r\n");
      out.write("            new daum.Postcode({\r\n");
      out.write("                oncomplete: function(data) {\r\n");
      out.write("                    // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("                    // 도로명 주소의 노출 규칙에 따라 주소를 표시한다.\r\n");
      out.write("                    // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("                    var roadAddr = data.roadAddress; // 도로명 주소 변수\r\n");
      out.write("                    var extraRoadAddr = ''; // 참고 항목 변수\r\n");
      out.write("\r\n");
      out.write("                    // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("                    // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("                    if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n");
      out.write("                        extraRoadAddr += data.bname;\r\n");
      out.write("                    }\r\n");
      out.write("                    // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("                    if(data.buildingName !== '' && data.apartment === 'Y'){\r\n");
      out.write("                       extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("                    }\r\n");
      out.write("                    // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("                    if(extraRoadAddr !== ''){\r\n");
      out.write("                        extraRoadAddr = ' (' + extraRoadAddr + ')';\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("                    document.getElementById('postcode').value = data.zonecode;\r\n");
      out.write("                    document.getElementById(\"roadAddress\").value = roadAddr;\r\n");
      out.write("                    document.getElementById(\"jibunAddress\").value = data.jibunAddress;\r\n");
      out.write("                    document.getElementById(\"engAddress\").value = data.addressEnglish;\r\n");
      out.write("                           \r\n");
      out.write("                    // 참고항목 문자열이 있을 경우 해당 필드에 넣는다.\r\n");
      out.write("                    if(roadAddr !== ''){\r\n");
      out.write("                        document.getElementById(\"extraAddress\").value = extraRoadAddr;\r\n");
      out.write("                    } else {\r\n");
      out.write("                        document.getElementById(\"extraAddress\").value = '';\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    var guideTextBox = document.getElementById(\"guide\");\r\n");
      out.write("                    // 사용자가 '선택 안함'을 클릭한 경우, 예상 주소라는 표시를 해준다.\r\n");
      out.write("                    if(data.autoRoadAddress) {\r\n");
      out.write("                        var expRoadAddr = data.autoRoadAddress + extraRoadAddr;\r\n");
      out.write("                        guideTextBox.innerHTML = '(예상 도로명 주소 : ' + expRoadAddr + ')';\r\n");
      out.write("                        guideTextBox.style.display = 'block';\r\n");
      out.write("\r\n");
      out.write("                    } else if(data.autoJibunAddress) {\r\n");
      out.write("                        var expJibunAddr = data.autoJibunAddress;\r\n");
      out.write("                        guideTextBox.innerHTML = '(예상 지번 주소 : ' + expJibunAddr + ')';\r\n");
      out.write("                        guideTextBox.style.display = 'block';\r\n");
      out.write("                    } else {\r\n");
      out.write("                        guideTextBox.innerHTML = '';\r\n");
      out.write("                        guideTextBox.style.display = 'none';\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            }).open();\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("<footer id=\"divFooter\">\r\n");
      out.write("    <div class=\"center\">\r\n");
      out.write("        <p class=\"bold\">2404 2조</p>\r\n");
      out.write("        <p>SEMI PROJECT</p>\r\n");
      out.write("        <p class=\"contact\">BOOKOREA@naver.com</p>\r\n");
      out.write("    </div>\r\n");
      out.write("</footer>");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
